<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sems.vm.persistence.VM2101Mapper">
	<sql id="retrieveAsListSql">
		SELECT SA.AS_NO 			as asNo, 			SA.STR_NM			as strNm, SA.VIEW_STR_CD 	as viewStrCd
			, SA.ADDR				as addr,			SA.TEL_NO			as telNo
			, DATE_FORMAT(SA.AS_DTTM, '%Y-%m-%d')							as asDttm
			, SA.VENDOR_NM			as vendorNm,		IFNULL(SA.VENDOR_USER_NM, '-')					as vendorUserNm
			, SA.VENDOR_CD			as vendorCd,		SA.VENDOR_USER_ID	as vendorUserId
			, SA.ERROR_TYPE_CD 		as errorType, 		SA.AS_TITLE			as asTitle, SA.AS_NOTE 		as asNote
			, SA.EMERGENCY_LEVEL	as emergencyLevel, 	SA.ERROR_TYPE		as errorTypeTxt
			, DATE_FORMAT(SA.RESOLVE_DTTM, '%Y-%m-%d')						as resolveDttm
		FROM TH_STR_SIGN_AS SA
			LEFT OUTER JOIN TH_ABS_ERROR_MST EM
				ON SA.ERROR_TYPE_CD = EM.ERROR_CD
		WHERE SA.PROG_STAT = #{progStat}
		<if test='strNm != "" and strNm != null'>
			AND SA.STR_NM LIKE CONCAT('%',#{strNm},'%')
		</if>
		<if test='authId == "13"'>
			AND SA.VENDOR_CD = (
				SELECT UM.VENDOR_CD
				FROM TH_USER_MST UM
				WHERE UM.USER_ID = #{userId}
			)
		</if>
		
		<if test='authId == "13"'>
			ORDER BY IF(SA.VENDOR_USER_ID = #{userId}, 0, 1), VENDOR_USER_ID
			<if test='order == "date" '>
				<if test='progStat != "Y" '>
					, SA.AS_DTTM DESC
				</if>
				<if test='progStat == "Y" '>
					, SA.RESOLVE_DTTM DESC
				</if>
			</if>
		</if>
		<if test='authId != "13"'>
			<if test='order == "name" '>
				ORDER BY SA.STR_NM
			</if>
			<if test='order == "date" '>
				<if test='progStat != "Y" '>
					ORDER BY SA.AS_DTTM DESC
				</if>
				<if test='progStat == "Y" '>
					ORDER BY SA.RESOLVE_DTTM DESC
				</if>
			</if>
		</if>
	</sql>
	
	<select id="retrieveAsListByProgStat" parameterType="Map" resultType="Map">
		<include refid="retrieveAsListSql"/>
		LIMIT ${startRow}, ${pagingRowCnt}
	</select>
	
	<select id="retrieveAsListByProgStatTotalCnt" parameterType="Map" resultType="int">
		SELECT COUNT(*)
		FROM (
			<include refid="retrieveAsListSql"/>
			) T
	</select>
	
	<sql id="retrieveCancelAsListSql">
		SELECT AC.AS_NO 		AS asNo, 			AC.CANCEL_ID 	as cencelId, UM.USER_NM as userNm
			, DATE_FORMAT(AC.CANCEL_DTTM, '%Y-%m-%d %H:%i:%s')		AS cancelDttm
			, CC.COMM_CD_NM 	as cancelReason, 	AC.STR_NM 		as strNm
		FROM TH_STR_SIGN_AS_CANCEL AC
			LEFT OUTER JOIN TH_USER_MST UM
				ON AC.CANCEL_ID = UM.USER_ID
			LEFT OUTER JOIN TH_COMM_CD CC
				ON CC.COMM_GRP_CD = 'VIEW19'
					AND AC.CANCEL_REASON = CC.COMM_CD
		WHERE 1=1
		<if test='authId == "13" '>
			AND AC.VENDOR_CD = (
								SELECT VENDOR_CD
								FROM TH_USER_MST
								WHERE USER_ID = #{userId}
								)
		</if>
		<if test='order == "name" '>
		ORDER BY AC.STR_NM
		</if>
		<if test='order == "date" '>
		ORDER BY AC.CANCEL_DTTM DESC
		</if>
	</sql>
	
	<select id="retrieveCancelAsList" parameterType="Map" resultType="Map">
		<include refid="retrieveCancelAsListSql"/>
		LIMIT ${startRow}, ${pagingRowCnt}
	</select>
	
	<select id="retrieveCancelAsListTotalCnt" parameterType="Map" resultType="int">
		SELECT COUNT(*)
		FROM (
			<include refid="retrieveCancelAsListSql"/>
			) T
	</select>
	
	<select id="retrieveVendorUserList" parameterType="Map" resultType="Map">
		SELECT USER_ID as userId, USER_NM as userNm
		FROM TH_USER_MST
		WHERE VENDOR_CD = #{vendorCd}
			AND USE_YN = 'Y'
		  	AND USER_ID NOT LIKE '%_master%'
	</select>
	
	<select id="retrieveErrorType" parameterType="Map" resultMap="majorMap">
		SELECT E1.ERROR_CD as majorCd, E1.ERROR_NM as majorNm,
			E2.ERROR_CD as mediumCd, E2.ERROR_NM as mediumNm,
			E3.ERROR_CD as minorCd, E3.ERROR_NM as minorNm, E3.EMERGENCY_LEVEL as emergencyLevel
		FROM TH_ABS_ERROR_MST E1
			, TH_ABS_ERROR_MST E2
			, TH_ABS_ERROR_MST E3
		WHERE E2.ERROR_CD LIKE CONCAT(E1.ERROR_CD, '%')
			AND E3.ERROR_CD LIKE CONCAT(E2.ERROR_CD, '%')
			AND LENGTH(E1.ERROR_CD) = 4
			AND LENGTH(E2.ERROR_CD) = 8
			AND LENGTH(E3.ERROR_CD) = 12
			AND E1.USE_YN = 'Y' AND E2.USE_YN = 'Y' AND E3.USE_YN = 'Y'
			AND (E1.TYPE = 'ALL' OR E1.TYPE = 'S')
			AND (E2.TYPE = 'ALL' OR E2.TYPE = 'S')
			AND (E3.TYPE = 'ALL' OR E3.TYPE = 'S')
	</select>
	
	<resultMap id="majorMap" type="java.util.HashMap">
	    <id property="code" column="majorCd"></id>
	    <result property="contents" column="majorNm"></result>
	    <collection property="child" javaType="java.util.ArrayList" resultMap="mediumMap"/>
	</resultMap>
	
	<resultMap id="mediumMap" type="java.util.HashMap">
	    <id property="code" column="mediumCd"></id>
	    <result property="contents" column="mediumNm"></result>
	    <collection property="child" javaType="java.util.ArrayList" resultMap="minorMap"/>
	</resultMap>
	
	<resultMap id="minorMap" type="java.util.HashMap">
	    <id property="code" column="minorCd"></id>
	    <result property="contents" column="minorNm"></result>
	    <result property="emergencyLevel" column="emergencyLevel"></result>
	</resultMap>
	
	<select id="retrieveProgStatByAsNo" parameterType="Map" resultType="String">
		SELECT PROG_STAT
		FROM TH_STR_SIGN_AS
		WHERE AS_NO = #{asNo}
	</select>
	
	<update id="checkAsByAsNo" parameterType="Map">
		UPDATE TH_STR_SIGN_AS
		SET ERROR_TYPE 			= #{errorType}
			,ERROR_TYPE_CD		= #{errorTypeCd}
			,EMERGENCY_LEVEL 	= #{emergencyLevel}
			,PROG_STAT 			= 'S'
			,VENDOR_USER_ID		= #{vendorUserId}
			,VENDOR_USER_NM 	= #{vendorUserNm}
			,CHECK_DTTM			= #{now}
			,AS_NOTE 			= #{asNote}
			,FINAL_MOD_ID 		= #{regiId}
			,FINAL_MOD_DTTM 	= #{now}
		WHERE AS_NO = #{asNo}
	</update>
	
	<insert id="insertAsLog" parameterType="Map">
		INSERT
		INTO TH_LOG_STR_SIGN_AS
		SET AS_NO 			= #{asNo}
			,REPORT_DTTM 	= #{now}
			,USER_ID 		= #{regiId}
			,PROG_STAT		= #{progStat}
			,RESOLVE_NOTE	= #{resolveNote}
			,FILE1_IMG 		= #{file1}
			,FILE2_IMG 		= #{file2}
			,FILE3_IMG 		= #{file3}
			,FILE4_IMG 		= #{file4}
			,FILE5_IMG 		= #{file5}
			,REGI_ID 		= #{regiId}
			,REGI_DTTM 		= #{now}
	</insert>
	
	<update id="changeAsByAsNo" parameterType="Map">
		UPDATE TH_STR_SIGN_AS
		SET VENDOR_USER_NM		= #{regiNm}
			,VENDOR_USER_ID		= #{regiId}
			,PROG_STAT 			= 'S'
			,FINAL_MOD_ID 		= #{regiId}
			,FINAL_MOD_DTTM 	= #{now}
		WHERE AS_NO = #{asNo}
	</update>
	
	<insert id="resolveAsByAsNo" parameterType="Map">
		INSERT
		INTO TH_STR_SIGN_AS_RESOLVE
		SET AS_NO 				= #{asNo}
			, RESOLVE_NOTE 		= #{resolveNote}
			, SUB_NOTE	 		= #{subNote}
			, OWNER_NM 			= #{ownerNm}
			, OWNER_TEL_NO 		= #{ownerTelNo}
			, OWNER_NOTE 		= #{ownerNote}
			, OWNER_SIGN_YN 	= #{ownerSignYn}
			, AGREE_YN			= #{agreeYn}
			<if test='file0 != null and file0 != ""'>
			, SIGN_IMG 			= #{file0}
			</if>
			<if test='file1 != null and file1 != ""'>
			, FILE1_IMG 		= #{file1}
			</if>
			<if test='file2 != null and file2 != ""'>
			, file2_IMG 		= #{file2}
			</if>
			<if test='file3 != null and file3 != ""'>
			, file3_IMG 		= #{file3}
			</if>
			<if test='file4 != null and file4 != ""'>
			, file4_IMG 		= #{file4}
			</if>
			<if test='file5 != null and file5 != ""'>
			, file5_IMG 		= #{file5}
			</if>
			, REGI_ID 			= #{regiId}
			, REGI_DTTM 		= #{now}
			, FINAL_MOD_ID 		= #{regiId}
			, FINAL_MOD_DTTM 	= #{now}
		ON DUPLICATE KEY UPDATE
			RESOLVE_NOTE 		= #{resolveNote}
			, SUB_NOTE	 		= #{subNote}
			, OWNER_NM 			= #{ownerNm}
			, OWNER_TEL_NO 		= #{ownerTelNo}
			, OWNER_NOTE 		= #{ownerNote}
			, OWNER_SIGN_YN 	= #{ownerSignYn}
			<if test='file0 != null and file0 != ""'>
			, SIGN_IMG 			= #{file0}
			</if>
			<if test='file1 != null and file1 != ""'>
			, FILE1_IMG 		= #{file1}
			</if>
			<if test='file2 != null and file2 != ""'>
			, file2_IMG 		= #{file2}
			</if>
			<if test='file3 != null and file3 != ""'>
			, file3_IMG 		= #{file3}
			</if>
			<if test='file4 != null and file4 != ""'>
			, file4_IMG 		= #{file4}
			</if>
			<if test='file5 != null and file5 != ""'>
			, file5_IMG 		= #{file5}
			</if>
			, FINAL_MOD_ID 		= #{regiId}
			, FINAL_MOD_DTTM 	= #{now}
	</insert>
	
	<update id="updateResolveDttmByAsNo" parameterType="Map">
		UPDATE TH_STR_SIGN_AS
		SET PROG_STAT = 'Y'
			,RESOLVE_DTTM 	= #{now}
			,SEND_YN		= 'N'
			,UPDATE_DTTM 	= #{now}
			,FINAL_MOD_ID 	= #{regiId}
			,FINAL_MOD_DTTM = #{now}
		WHERE AS_NO = #{asNo}
	</update>
	
	<insert id="saveAsLog" parameterType="Map">
		INSERT
		INTO TH_LOG_SIGN_AS_SEND
		SET AS_NO 		 	=#{asNo},
			AS_DTTM 		=#{now}, 
			WEB_REQ_DTTM 	=#{now}, 
			WEB_REQ_PARAM 	=#{paramString}
		ON DUPLICATE KEY UPDATE
			AS_DTTM 		=#{now}, 
			WEB_REQ_DTTM 	=#{now}, 
			WEB_REQ_PARAM 	=#{paramString}
	</insert>
	
	<select id="getCnt" parameterType="Map" resultType="String">
		SELECT COUNT(*)
		FROM TH_STR_INFO_MST
		WHERE 
			VIEW_STR_CD = (
				SELECT VIEW_STR_CD 
				FROM TH_STR_SIGN_AS
				WHERE AS_NO = #{asNo}
			)
	</select>
	
	<select id="getVStrCd" parameterType="Map" resultType="Map">
		SELECT VIEW_STR_CD, STR_NM 
		FROM TH_STR_SIGN_AS 
		WHERE AS_NO = #{asNo}
	</select>
	
	<select id="findStrUser" parameterType="Map" resultType="String">
		SELECT COUNT(*) 
		FROM TH_USER_MST
		WHERE USER_ID = #{vStrCd}
	</select>
	
	<insert id="insertUser" parameterType="Map">
		INSERT INTO TH_USER_MST 
		SET USER_ID = #{vStrCd} 
		, USER_NM = #{strNm} 
		, USER_PW= AES_ENCRYPT('1',#{encKey})
		, COMPANY_CD = 'GSR'
		, EULA_YN = 'N'
		, USE_YN = 'Y'
		, REGI_ID = 'SEMS'
		, REGI_DTTM = NOW()
		, FINAL_MOD_ID = 'SEMS'
		, FINAL_MOD_DTTM = NOW()
	</insert>
	
	<insert id="insertUserAuth" parameterType="Map">
		INSERT INTO TH_USER_AUTH
		SET COMPANY_CD = 'GSR'
			, USER_ID = #{vStrCd}
			, AUTH_ID = '11'
	</insert>
	
	<insert id="insertUserStrMap" parameterType="Map">
		INSERT INTO TH_USER_STR_MAP
		SET USER_ID = #{vStrCd}
			, STR_CD = #{vStrCd}
			, MAP_YN = 'Y'
			, REGI_ID = 'SEMS'
			, REGI_DTTM = NOW()
			, FINAL_MOD_ID = 'SEMS'
			, FINAL_MOD_DTTM = NOW()
	</insert>
	
	<update id="uptSemResLog" parameterType="Map">
		UPDATE TH_LOG_SIGN_AS_SEND
		SET SEM_RES_DTTM=#{now}
		WHERE AS_NO = #{asNo}
	</update>
	
	<update id="uptSemReqLog" parameterType="Map">
		UPDATE TH_LOG_SIGN_AS_SEND
		SET SEM_REQ_DTTM =#{now}, 
			SEM_REQ_PARAM=#{paramString}
		WHERE AS_NO = #{asNo}
	</update>
	
	<update id="uptAlgResLog" parameterType="Map">
		UPDATE TH_LOG_SIGN_AS_SEND
		SET ALG_ID			= IFNULL(#{info.mid}, IF(#{code} = 0, '테스트모드', NULL)),
			ALG_RES_DTTM 	= #{now},
			ALG_RES_RSLT 	= #{code}
		WHERE AS_NO = #{asNo}
	</update>
	
	<select id="retrieveResolveAsByAsNo" parameterType="Map" resultType="Map">
		SELECT SAS.TARGET as target, SAS.MAKER_CD as makerCd, SAS.MODEL_NM as modelNm, SAS.SERIAL_NO as serialNo, SAS.RESOLVE_NOTE as resolveNote
			, SAS.SUB_NOTE as subNote
			, SAS.OWNER_NM as ownerNm, SAS.OWNER_TEL_NO as ownerTelNo, SAS.OWNER_NOTE as ownerNote, SAS.OWNER_SIGN_YN as ownerSignYn
			, SAS.SIGN_IMG as signImg
			, SAS.FILE1_IMG as file1Img, SAS.FILE2_IMG as file2Img
			, SAS.FILE3_IMG as file3Img, SAS.FILE4_IMG as file4Img
			, SAS.FILE5_IMG as file5Img
		FROM TH_STR_SIGN_AS SA
			LEFT OUTER JOIN TH_STR_SIGN_AS_RESOLVE SAS
				ON SA.AS_NO = SAS.AS_NO
		WHERE SAS.AS_NO = #{asNo}
	</select>
	
	<update id="modifyAsByAsNo" parameterType="Map">
		UPDATE TH_STR_SIGN_AS
		SET ERROR_TYPE 			= #{errorType}
			,ERROR_TYPE_CD		= #{errorTypeCd}
			,EMERGENCY_LEVEL 	= #{emergencyLevel}
			,AS_NOTE 			= #{asNote}
			,FINAL_MOD_ID 		= #{regiId}
			,FINAL_MOD_DTTM 	= #{now}
		WHERE AS_NO = #{asNo}
	</update>
	
	<select id="retrieveVendorList" parameterType="Map" resultType="Map">
	<![CDATA[
		SELECT 
			VENDOR_CD	AS value, 
			VENDOR_NM	AS name
		FROM TH_SIGN_VENDOR_MST 
		WHERE USE_YN = 'Y'
	]]>
		<if test="vendorCd != 'SERVEONE' and authId != 6 and authId != 9 ">
			AND VENDOR_CD = (
								SELECT VENDOR_CD
								FROM TH_USER_MST
								WHERE USER_ID = #{userId}
									AND USE_YN = 'Y'
							)
		</if>
	<![CDATA[ 
			AND COMPANY_CD = #{companyCd} 
		ORDER BY name
	]]>
	</select>
	
	<select id="retrieveAsByAsNo" parameterType="Map" resultType="Map">
		SELECT AS_NO
		FROM TH_STR_SIGN_AS
		WHERE AS_NO = #{asNo}
	</select>
	
	<sql id="retrieveAbsStrListSql">
		SELECT IM.STR_NM 		AS strNm
		     , IM.VIEW_STR_CD 	AS viewStrCd
		     , IM.ADDR 			AS addr
		     , IM.TEL_NO 		AS telNo
		FROM TH_ABS_STR_INFO_MST IM
		WHERE 1 = 1
		<if test='strNm != null and strNm != "" '>
			AND (
				IM.STR_NM LIKE CONCAT('%',#{strNm},'%')
				OR
				IM.VIEW_STR_CD LIKE CONCAT('%',#{strNm},'%')
			)
		</if>
		ORDER BY IM.STR_NM
	</sql>
	
	<select id="retrieveAbsStrList" parameterType="Map" resultType="Map">
		<include refid="retrieveAbsStrListSql"/>
		LIMIT ${startRow}, ${pagingRowCnt}
	</select>
	
	<select id="retrieveAbsStrListTotalCnt" parameterType="Map" resultType="int">
		SELECT COUNT(*)
		FROM (
			<include refid="retrieveAbsStrListSql"/>
			) T
	</select>
	
	<insert id="saveAs" parameterType="Map">
		INSERT
		INTO TH_STR_SIGN_AS
			SET AS_NO 			= #{asNo}
			<if test='toMe == "Y" '>
			/* 나에게 접수 체크 시 예정으로 등록*/
			,PROG_STAT 			= 'S'
			</if>
			<if test='toMe == "N" '>
			,PROG_STAT 			= 'U'
			</if>
			,AS_DTTM 			= NOW()
			,STR_NM 			= #{strNm}
			,VIEW_STR_CD 		= #{viewStrCd}
			,TEL_NO 			= #{telNo}
			,ADDR 				= #{addr}
			,VENDOR_CD 			= #{vendorCd}
			,VENDOR_NM 			= #{vendorNm}
			,VENDOR_USER_ID		= #{vendorUserId}
			,VENDOR_USER_NM 	= #{vendorUserNm}
			,ERROR_TYPE_CD 		= #{errorTypeCd}
			,ERROR_TYPE 		= #{errorType}
			,EMERGENCY_LEVEL 	= #{emergencyLevel}
			,AS_NOTE 			= #{asNote}
			,REGI_ID 			= #{regiId}
			,REGI_DTTM 			= NOW()
			,FINAL_MOD_ID 		= #{regiId}
			,FINAL_MOD_DTTM 	= NOW()
	</insert>
	
	<select id="getStrInfoByAsNo" parameterType="Map" resultType="Map">
		SELECT STR_NM as strNm, DATE_FORMAT(RESOLVE_DTTM, '%Y-%m-%d') as resolveDttm
			, SATISFACTION as satisfaction
			, IF(RESOLVE_DTTM >= DATE_SUB(NOW(), INTERVAL 1 DAY), 'Y', 'N') as dayYn
		FROM TH_STR_SIGN_AS
		WHERE AS_NO = #{asNo}
	</select>

	<update id="saveSignAsSatisfaction" parameterType="Map">
		UPDATE TH_STR_SIGN_AS
		SET SATISFACTION 		= #{satis}
		  , SATISFACTION_1		= #{satis_1}
		  , SATISFACTION_2		= #{satis_2}
		  , SATISFACTION_3		= #{satis_3}
		WHERE AS_NO = #{asNo}
	</update>
	
</mapper>