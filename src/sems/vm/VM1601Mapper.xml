<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sems.vm.persistence.VM1601Mapper">
	<select id="retrieveMntncDate" parameterType="Map" resultType="Map">
		SELECT YYYYMMDD as yyyymmdd
		FROM TH_STR_REGULAR_MAINTENANCE RM
		WHERE YYYYMMDD BETWEEN DATE_FORMAT(#{start}, '%Y%m%d')
						AND DATE_FORMAT(#{end},'%Y%m%d')
		<if test='authId == "3" and masterYn != "Y" '>
			AND RM.VENDOR_USER_ID = #{userId}
		</if>
		<if test='authId == "3" and masterYn == "Y" '>
				AND RM.VENDOR_CD = ( SELECT VENDOR_CD FROM TH_USER_MST WHERE USER_ID = #{userId})
			</if>
		GROUP BY YYYYMMDD
	</select>
	
	<sql id="retrieveMntncListSql">
		SELECT RM.INIT_STR_CD 		AS initStrCd, 	RM.YYYYMM 		AS yyyymm, 		RM.TYPE 		as mntncType
			, RM.VENDOR_NM 			AS vendorNm, 	RM.ADDR 		AS addr, 		DATE_FORMAT(RM.YYYYMMDD, '%Y-%m-%d') 	as yyyymmdd
			, RM.SECTOR_FULL 		AS sector, 		IFNULL(RM.VENDOR_USER_NM, '미지정') 			as vendorUserNm
			, RM.STR_NM 			as strNm, 		RM.VIEW_STR_CD 	as viewStrCd, 	CC.COMM_CD_NM 	as progStat
			, DATE_FORMAT(RM.PROG_START_DTTM, '%Y-%m-%d %H:%i:%s') 	as startTime
			, DATE_FORMAT(RM.PROG_END_DTTM, '%Y-%m-%d %H:%i:%s') 	as endTime
		FROM TH_STR_REGULAR_MAINTENANCE RM
			LEFT OUTER JOIN TH_COMM_CD CC
				ON RM.PROG_STAT = CC.COMM_CD
					AND CC.COMM_GRP_CD = 'VIEW14'
					AND CC.USE_YN = 'Y'
		WHERE 1=1
			<if test='authId == "3" and masterYn != "Y" '>
				AND RM.VENDOR_USER_ID = #{userId}
			</if>
			<if test='authId == "3" and masterYn == "Y" '>
				AND RM.VENDOR_CD = ( SELECT VENDOR_CD FROM TH_USER_MST WHERE USER_ID = #{userId})
			</if>
			<if test='date != null and date != "" '>
				AND RM.YYYYMMDD = DATE_FORMAT(#{date}, '%Y%m%d')
			</if>
			<if test='strNm != null and strNm != "" '>
				AND (
					INSTR(RM.STR_NM, #{strNm}) > 0
					OR
					INSTR(RM.VIEW_STR_CD, #{strNm}) > 0
				)
			</if>
			<if test='progStatCd != null and progStatCd != "" '>
				AND RM.PROG_STAT = #{progStatCd}
			</if>
			AND RM.YYYYMMDD IS NOT NULL
		ORDER BY RM.YYYYMMDD DESC, RM.STR_NM
	</sql>
	
	<select id="retrieveMntncList" parameterType="Map" resultType="Map">
		<include refid="retrieveMntncListSql"/>
		LIMIT #{startRow}, #{pagingRowCnt}
	</select>
	
	<select id="retrieveMntncListTotalCnt" parameterType="Map" resultType="int">
		SELECT COUNT(*)
		FROM (
			<include refid="retrieveMntncListSql"/>
			) T
	</select>
	
	<select id="retrieveCheckList" parameterType="Map" resultType="Map">
		SELECT CODE as checkId, CONTENTS as checkContents, CHECK_TYPE as checkType
		, REQUIRED_YN AS requiredYn, DEFAULT_NOTE as defaultNote, SEMS_YN as semsYn, SEQ as seq
		FROM TH_MAINTENANCE_CHECK_LIST
		WHERE TYPE = #{mntncType}
			AND USE_YN = 'Y'
			AND CHAR_LENGTH(SEQ) > 4
		ORDER BY SEQ
	</select>
	
	<select id="retrieveSensorData" parameterType="Map" resultType="Map">
		SELECT *
		FROM (
			SELECT DM.STR_CD as strCd, DM.TEMON_ID as temonId, DM.TEMON_TYPE as temonType, DM.PORT_NO as portNo
				, DM.DEVICE_TYPE as deviceType, DM.DEVICE_LOC as deviceLoc
				, IFNULL(ROUND(DB.SENS_TEMP/10,1),'-') as sensTemp
			FROM TH_STR_REMS_DEVICE_MST DM
				,TH_STR_REMS_DEVICE_BASE DB
			WHERE DM.STR_CD 		= DB.STR_CD
				AND DM.TEMON_ID 	= DB.TEMON_ID
				AND DM.TEMON_TYPE 	= DB.TEMON_TYPE
				AND DM.PORT_NO 		= DB.PORT_NO
				AND DM.STR_CD 		= #{strCd}
				AND DB.REPORT_DTTM	>= DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 10 MINUTE), '%Y-%m-%d %H:%i:%s')
			ORDER BY DB.REPORT_DTTM DESC
			LIMIT 1000
		) T
		GROUP BY T.strCd, T.temonId, T.temonType, T.portNo, T.deviceType
	</select>
	
	<update id="saveMaintenance" parameterType="Map">
		UPDATE TH_STR_REGULAR_MAINTENANCE
		SET PROG_STAT			= 'Y'
			,PROG_END_DTTM		= NOW()
			,REPAIR_YN			= #{repairYn}
			<if test='apprStat != null and apprStat != "" '>
				, APPROVAL_STAT		= #{apprStat}
			</if>
			,FINAL_MOD_ID		= #{regiId}
			,FINAL_MOD_DTTM		= #{now}
		WHERE INIT_STR_CD	= #{initStrCd}
			AND YYYYMM		= #{yyyymm}
			AND TYPE		= #{mntncType}
	</update>
	
	<update id="saveMaintenanceResolve" parameterType="Map">
		INSERT
		INTO TH_STR_REGULAR_MAINTENANCE_RESOLVE
		SET INIT_STR_CD 		= #{initStrCd}
			,YYYYMM 			= #{yyyymm}
			,TYPE 				= #{mntncType}
			,CHECK_JSON 		= #{checkList}
			,OPER_STAT			= #{operStat}
		<if test='operNote != null and operNote != "" '>
			,OPER_NOTE			= #{operNote}
		</if>
			,OWNER_NM			= #{ownerNm}
			,OWNER_TEL_NO		= #{telNo}
			,OWNER_SIGN_YN		= #{ownerSignYn}
			,NOTE				= #{note}
			,SUB_NOTE			= #{subNote}
			,AGREE_YN			= #{agreeYn}
		<if test='file0 != null and file0 != "" '>
			, SIGN_IMG 			= #{file0}
		</if>
		<if test='file1 != null and file1 != "" '>
			, FILE1_IMG 		= #{file1}
		</if>
		<if test='file2 != null and file2 != "" '>
			, FILE2_IMG 		= #{file2}
		</if>
		<if test='file3 != null and file3 != "" '>
			, FILE3_IMG 		= #{file3}
		</if>
		<if test='repairParam != null and repairParam != ""'>
			,TARGET 			= #{repairParam.target}
			,MAKER_CD			= #{repairParam.maker}
			,MODEL_NM			= #{repairParam.modelNm}
			,SERIAL_NO			= #{repairParam.serialNo}
			,AS_NO				= #{repairParam.asNo}
			,REPAIR_NOTE		= #{repairParam.repairNote}
		</if>
			,REGI_ID			= #{regiId}
			,REGI_DTTM			= #{now}
			,FINAL_MOD_ID		= #{regiId}
			,FINAL_MOD_DTTM		= #{now}
		ON DUPLICATE KEY UPDATE
			CHECK_JSON 		= #{checkList}
			,OPER_STAT			= #{operStat}
		<if test='operNote != null and operNote != "" '>
			,OPER_NOTE			= #{operNote}
		</if>
			,OWNER_NM			= #{ownerNm}
			,OWNER_TEL_NO		= #{telNo}
			,OWNER_SIGN_YN		= #{ownerSignYn}
			,NOTE				= #{note}
		<if test='file0 != null and file0 != "" '>
			, SIGN_IMG 			= #{file0}
		</if>
		<if test='file1 != null and file1 != "" '>
			, FILE1_IMG 		= #{file1}
		</if>
		<if test='file2 != null and file2 != "" '>
			, FILE2_IMG 		= #{file2}
		</if>
		<if test='file3 != null and file3 != "" '>
			, FILE3_IMG 		= #{file3}
		</if>
		<if test='repairParam != null and repairParam != ""'>
			,TARGET 			= #{repairParam.target}
			,MAKER_CD			= #{repairParam.maker}
			,MODEL_NM			= #{repairParam.modelNm}
			,SERIAL_NO			= #{repairParam.serialNo}
			,AS_NO				= #{repairParam.asNo}
			,REPAIR_NOTE		= #{repairParam.repairNote}
		</if>
			,FINAL_MOD_ID		= #{regiId}
			,FINAL_MOD_DTTM		= #{now}
	</update>
	<insert id="saveMnLog" parameterType="Map">
		INSERT
		INTO TH_LOG_RGL_MAINTENANCE
		SET INIT_STR_CD		= #{initStrCd},
			YYYYMM			= #{yyyymm},
			TYPE			= #{mntncType},
			WEB_REQ_DTTM 	= #{now}, 
			WEB_REQ_PARAM 	= #{paramString}
		ON DUPLICATE KEY UPDATE
			WEB_REQ_DTTM 	= #{now}, 
			WEB_REQ_PARAM 	= #{paramString}
	</insert>
	<update id="uptSemResLog" parameterType="Map">
		UPDATE TH_LOG_RGL_MAINTENANCE
		SET SEM_RES_DTTM=#{now}
		WHERE INIT_STR_CD 	= #{initStrCd}
			AND YYYYMM 		= #{yyyymm}
			AND TYPE 		= #{mntncType}
	</update>
	<update id="uptSemReqLog" parameterType="Map">
		UPDATE TH_LOG_RGL_MAINTENANCE
		SET SEM_REQ_DTTM =#{now}, 
			SEM_REQ_PARAM=#{paramString}
		WHERE INIT_STR_CD 	= #{initStrCd}
			AND YYYYMM 		= #{yyyymm}
			AND TYPE 		= #{mntncType}
	</update>
	<update id="uptAlgResLog" parameterType="Map">
	<![CDATA[
		UPDATE TH_LOG_RGL_MAINTENANCE
		SET ALG_ID			= IFNULL(#{info.mid}, IF(#{code} = 0, '테스트모드', NULL)),
			ALG_RES_DTTM 	= #{now}, 
			ALG_RES_RSLT 	= #{code}
		WHERE INIT_STR_CD 	= #{initStrCd}
			AND YYYYMM 		= #{yyyymm}
			AND TYPE 		= #{mntncType}
	]]>
	</update>
	<insert id="saveMaintenanceRepair" parameterType="Map">
		INSERT
		INTO TH_STR_REGULAR_MAINTENANCE_REPAIR
			(INIT_STR_CD, YYYYMM, TYPE, INDEX_SEQ, PART_GRP_CD, PART_TYPE, PART_TARGET, PART_CD, PART_NO, MAKER_NM, MIDDLE_NM, SMALL_NM, PART_NM, REGI_ID, REGI_DTTM, FINAL_MOD_ID, FINAL_MOD_DTTM)
		SELECT * FROM (
			<foreach collection="partList" item="item" separator=" union ">
				SELECT #{initStrCd} as initStrCd, #{yyyymm} as yyyymm, #{mntncType} as type
					, #{item.index} as indexSeq, #{item.partGrpCd} as partGrpCd, #{item.partType} as partType, #{item.partTarget} as partTarget
					, #{item.partCd} as partCd, #{item.partNo} as partNo, #{item.makerNm} as makerNm, #{item.middleNm} as middleNm, #{item.smallNm} as smallNm, #{item.partNm} as partNm
					, #{regiId} as regiId, #{now} as regiDttm, #{regiId} as finalModId, #{now} as finalModDttm
			</foreach>
		)T
	</insert>
	
	<insert id="saveMaintenanceRepairPrice" parameterType="Map">
		INSERT
		INTO TH_STR_REGULAR_MAINTENANCE_REPAIR_PRICE
			(INIT_STR_CD, YYYYMM, TYPE, INDEX_SEQ, PRICE_TARGET, PRICE, REGI_ID, REGI_DTTM, FINAL_MOD_ID, FINAL_MOD_DTTM)
		SELECT * FROM (
			<foreach collection="partList" item="item" separator="union">
				<foreach collection="item.priceList" item="price" separator="union">
					SELECT #{initStrCd} as initStrCd, #{yyyymm} as yyyymm, #{mntncType} as type
						, #{item.index} as indexSeq, #{price.target} as priceTarget, #{price.price} as price
						, #{regiId} as regiId, #{now} as regiDttm, #{regiId} as finalModId, #{now} as finalModDttm
				</foreach>
			</foreach>
		)T
	</insert>
	
	<select id="getPartList" parameterType="Map" resultType="Map">
		SELECT T.PART_GRP_CD as partGrpCd, T.PART_CD as seq, T.PART_TYPE 	as partType
			, T.PART_NM as partNm, T.PART_INITIAL partInitial, T.MAKER 		as maker
			,GROUP_CONCAT(MPM.PRICE_TARGET) 								as priceTargetGroup
			,GROUP_CONCAT(IF(MPM.PRICE = '-', 0, MPM.PRICE))				as priceGroup
			,T.PART_NO						as partNo
		FROM (
			SELECT *
			FROM TH_ABS_PART_MST PM
			WHERE PM.USE_YN = 'Y'
				AND PM.PART_TYPE = 'P'
				AND PM.PART_GRP_CD = (
						SELECT PART_GRP_CD
						FROM TH_ABS_PART_MST
						WHERE 1=1
						<if test='asNo != null and asNo != "" '>
							AND PART_GRP_CD <![CDATA[<=]]> (SELECT DATE_FORMAT(AS_DTTM, '%Y%m%d') FROM TH_STR_AS WHERE AS_NO = #{asNo})
						</if>
						<if test='asNo == null or asNo == "" '>
							AND PART_GRP_CD <![CDATA[<=]]> DATE_FORMAT(now(), '%Y%m%d')
						</if>
							AND PART_TYPE = 'P'
						GROUP BY PART_GRP_CD
						ORDER BY PART_GRP_CD DESC
						LIMIT 1
					)
			UNION ALL
			SELECT *
			FROM TH_ABS_PART_MST PM
			WHERE PM.USE_YN = 'Y'
				AND PM.PART_TYPE = 'F'
				AND PM.PART_GRP_CD = (	
						SELECT PART_GRP_CD
						FROM TH_ABS_PART_MST
						WHERE 1=1
						<if test='asNo != null and asNo != "" '>
							AND PART_GRP_CD <![CDATA[<=]]> (SELECT DATE_FORMAT(AS_DTTM, '%Y%m%d') FROM TH_STR_AS WHERE AS_NO = #{asNo})
						</if>
						<if test='asNo == null or asNo == "" '>
							AND PART_GRP_CD <![CDATA[<=]]> DATE_FORMAT(now(), '%Y%m%d')
						</if>
							AND PART_TYPE = 'F'
						GROUP BY PART_GRP_CD
						ORDER BY PART_GRP_CD DESC
						LIMIT 1
					)
		) T
			LEFT OUTER JOIN TH_ABS_PART_PRICE_MST MPM
						ON T.PART_CD = MPM.PART_CD
							AND T.PART_GRP_CD = MPM.PART_GRP_CD
							AND T.PART_TYPE = MPM.PART_TYPE
		GROUP BY T.PART_CD, T.PART_TYPE
		ORDER BY T.PART_CD
	</select>
	
	<select id="getErrorList" resultType="Map">
		SELECT CODE as code, CONTENTS as contents, SEQ as seq
		FROM TH_MAINTENANCE_CD
		WHERE GRP_CD = 'ERROR'
			AND USE_YN = 'Y'
		ORDER BY SEQ
	</select>
	
	<select id="getSatisList" resultType="Map">
		SELECT COMM_CD as code, COMM_CD_NM as name
		FROM TH_COMM_CD
		WHERE COMM_GRP_CD = 'VIEW15'
			AND USE_YN = 'Y'
		ORDER BY ORDER_SEQ + '@'
	</select>
	
	<select id="getStrInfo" parameterType="Map" resultType="Map">
		SELECT INIT_STR_CD as initStrCd, YYYYMM as yyyymm, TYPE as mntncType, STR_NM as strNm
			, DATE_FORMAT(PROG_END_DTTM, '%Y-%m-%d %H:%i:%s') as progDttm
			, SATISFACTION as satisfaction, SATISFACTION_REASON as satisfactionReason
			, IF(PROG_END_DTTM >= DATE_SUB(NOW(), INTERVAL 1 DAY), 'Y', 'N') as dayYn
		FROM TH_STR_REGULAR_MAINTENANCE
		WHERE INIT_STR_CD 	= #{initStrCd}
			AND YYYYMM 		= #{yyyymm}
			AND TYPE 		= #{type}
	</select>
	
	<update id="saveMaintenanceSatisfaction" parameterType="Map">
		UPDATE TH_STR_REGULAR_MAINTENANCE
		SET SATISFACTION			= #{satis}
			,SATISFACTION_REASON 	= #{satisReason}
		WHERE INIT_STR_CD 	= #{initStrCd}
			AND YYYYMM 		= #{yyyymm}
			AND TYPE 		= #{mntncType}
	</update>
	
	<select id="retrievePartGrpCd" parameterType="Map" resultType="Map">
		SELECT MAX(PART_GRP_CD) AS partGrpCd
		FROM TH_ABS_PART_PRICE_MST
	</select>
	
	<update id="saveMaintenanceTemp" parameterType="Map">
		INSERT
		INTO th_history_str_maintenance_temp
		SET INIT_STR_CD 		= #{initStrCd}
			, YYYYMM			= #{yyyymm}
			, TYPE				= #{mntncType}
			, YYYYMMDD			= DATE_FORMAT(NOW(), '%Y%m%d')
			, CHECK_JSON		= #{checkJson}
			, REGI_ID			= #{regiId}
			, REGI_DTTM			= NOW()
			, FINAL_MOD_ID 		= #{regiId}
			, FINAL_MOD_DTTM 	= NOW()
		ON DUPLICATE KEY UPDATE
			CHECK_JSON			= #{checkJson}
			, FINAL_MOD_ID 		= #{regiId}
			, FINAL_MOD_DTTM 	= NOW()
	</update>
	
	<select id="retrieveTempData" parameterType="Map" resultType="Map">
		SELECT CHECK_JSON as checkJson
		FROM TH_HISTORY_STR_MAINTENANCE_TEMP
		WHERE INIT_STR_CD 	= #{initStrCd}
			AND YYYYMM		= #{yyyymm}
			AND TYPE 		= #{mntncType}
			AND YYYYMMDD 	= DATE_FORMAT(NOW(), '%Y%m%d')
	</select>
	
	<insert id="insertMaintenanceLog" parameterType="Map">
		INSERT
		INTO TH_LOG_STR_REGULAR_MAINTENANCE
		SET INIT_STR_CD 	= #{initStrCd}
			,YYYYMM 		= #{yyyymm}
			,TYPE 			= #{mntncType}
			,REPORT_DTTM 	= #{now}
			,USER_ID 		= #{regiId}
			,PROG_STAT 		= #{progStat}
			<if test='repairParam != null and repairParam != "" '>
				,TARGET 		= #{repairParam.target}
				,MAKER_CD 		= #{repairParam.maker}
				,PART_JSON 		= #{repairParam.selectedPart}
				,MODEL_NM 		= #{repairParam.modelNm}
				,SERIAL_NO 		= #{repairParam.serialNo}
				,AS_NO	 		= #{repairParam.asNo}
				,REPAIR_NOTE	= #{repairParam.repairNote}
			</if>
			,FILE1_IMG 		= #{file1}
			,FILE2_IMG 		= #{file2}
			,FILE3_IMG 		= #{file3}
			,REGI_ID 		= #{regiId}
			,REGI_DTTM 		= #{now}
	</insert>
	
	<insert id="saveMntncStartTime" parameterType="Map">
		UPDATE TH_STR_REGULAR_MAINTENANCE
		SET PROG_START_DTTM 	= #{now}
			,FINAL_MOD_ID 		= #{regiId}
			,FINAL_MOD_DTTM 	= #{now}
		WHERE INIT_STR_CD 	= #{initStrCd}
			AND YYYYMM 		= #{yyyymm}
			AND TYPE		= #{mntncType}
			AND PROG_STAT 	!= 'Y'
	</insert>
	
	<select id="retrieveStrCd" parameterType="Map" resultType="String">
		SELECT STR_CD
		FROM TH_STR_INFO_MST IM
			, TH_STR_REGULAR_MAINTENANCE RM
		WHERE IM.VIEW_STR_CD = RM.VIEW_STR_CD
			AND IM.USE_YN = 'Y' AND IM.OPER_STAT = 'O'
			AND RM.INIT_STR_CD 	= #{initStrCd}
			AND RM.YYYYMM 		= #{yyyymm}
			AND RM.TYPE 		= #{mntncType}
		LIMIT 1
	</select>
	
	<select id="findStrUser" parameterType="Map" resultType="String">
		SELECT COUNT(*) 
		FROM TH_USER_MST
		WHERE USER_ID = #{vStrCd}
	</select>
	
	<select id="getCnt" parameterType="Map" resultType="String">
		SELECT COUNT(*)
		FROM TH_STR_INFO_MST
		WHERE 
			VIEW_STR_CD = (
				SELECT VIEW_STR_CD
				FROM TH_ABS_sTR_INFO_MST
				WHERE INIT_sTR_CD =  #{initStrCd}
			)
			AND USE_YN = 'Y' AND OPER_STAT = 'O'
	</select>
	
	<select id="getVStrCd" parameterType="Map" resultType="Map">
		SELECT VIEW_STR_CD, STR_NM 
		FROM TH_STR_REGULAR_MAINTENANCE
		WHERE INIT_STR_CD = #{initStrCd}
		ORDER BY REGI_DTTM DESC
		LIMIT 0,1
	</select>
	
	<insert id="insertUser" parameterType="Map">
		INSERT INTO TH_USER_MST 
		SET USER_ID = #{vStrCd} 
		, USER_NM = #{strNm} 
		, USER_PW= AES_ENCRYPT('1',#{encKey})
		, COMPANY_CD = 'GSR'
		, STR_CD = #{vStrCd}
		, EULA_YN = 'N'
		, USE_YN = 'Y'
		, REGI_ID = 'SEMS'
		, REGI_DTTM = NOW()
		, FINAL_MOD_ID = 'SEMS'
		, FINAL_MOD_DTTM = NOW()
	</insert>
	
	<insert id="insertUserStrMap" parameterType="Map">
		INSERT INTO TH_USER_STR_MAP
		SET USER_ID = #{vStrCd}
			, STR_CD = #{vStrCd}
			, MAP_YN = 'Y'
			, REGI_ID = 'SEMS'
			, REGI_DTTM = NOW()
			, FINAL_MOD_ID = 'SEMS'
			, FINAL_MOD_DTTM = NOW()
	</insert>
	
	<insert id="insertUserAuth" parameterType="Map">
		INSERT INTO TH_USER_AUTH
		SET COMPANY_CD = 'GSR'
			, USER_ID = #{vStrCd}
			, AUTH_ID = '11'
	</insert>
	
	<select id="retrieveUsedPart" parameterType="Map" resultType="String">
		SELECT 'Y'
		FROM TH_STR_REGULAR_MAINTENANCE RM
			, TH_STR_REGULAR_MAINTENANCE_REPAIR RMR
		WHERE RM.INIT_STR_CD = RMR.INIT_STR_CD AND RM.YYYYMM = RMR.YYYYMM AND RM.TYPE = RMR.TYPE
			AND RM.STR_NM = #{strNm}
			AND RMR.PART_NO = #{partNo}
			AND RM.PROG_END_DTTM >= DATE_SUB(NOW(), INTERVAL 6 MONTH)
			AND RM.PROG_START_DTTM >= '2024-05-01'	<!-- 5월 이후 등록된 건만 조회 -->
		UNION ALL
		
		SELECT 'Y'
		FROM TH_STR_AS SA
			, TH_STR_AS_REPAIR SAR
		WHERE SA.AS_NO = SAR.AS_NO
			AND SA.STR_NM = #{strNm}
			AND PART_NO = #{partNo}
			AND SA.RESOLVE_DTTM >= DATE_SUB(NOW(), INTERVAL 6 MONTH)
			AND SA.AS_DTTM >= '2024-05-01'	<!-- 5월 이후 등록된 건만 조회 -->
		
		LIMIT 1
	</select>

</mapper>